/**
 * EasyForm JavaScript Handler - Optimized Version
 * Version: 2.0.0
 * (c) 2024 EasyForm Team
 */
!function(){"use strict";class EasyFormHandler{constructor(config){this.config=config,this.form=document.getElementById(config.id),this.validators={},this.errors={},this.submitHandler=null,this.cache={elements:new Map,validators:new Map},this.debounceTimers=new Map,this.init()}init(){if(!this.form)return void console.error(`Form with ID ${this.config.id} not found`);this.setupValidation(),this.setupEventHandlers(),this.setupAjax(),this.setupConditionalLogic(),this.setupDynamicFields(),this.initializePlugins()}setupValidation(){this.config.validation&&(this.form.setAttribute("novalidate",!0),this.setupValidators(),this.setupRealTimeValidation())}setupValidators(){const validators={required:value=>value&&value.trim()?null:"Dieses Feld ist erforderlich",email:value=>/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)?null:"Bitte geben Sie eine gültige E-Mail-Adresse ein",minLength:(value,params)=>value.length>=params.min?null:`Mindestens ${params.min} Zeichen erforderlich`,maxLength:(value,params)=>value.length<=params.max?null:`Maximal ${params.max} Zeichen erlaubt`,pattern:(value,params)=>new RegExp(params.pattern).test(value)?null:params.message||"Ungültiges Format",numeric:value=>/^\d+$/.test(value)?null:"Nur Zahlen erlaubt",alphanumeric:value=>/^[a-zA-Z0-9]+$/.test(value)?null:"Nur Buchstaben und Zahlen erlaubt",url:value=>/^https?:\/\/.+\..+/.test(value)?null:"Bitte geben Sie eine gültige URL ein",date:value=>/^\d{4}-\d{2}-\d{2}$/.test(value)?null:"Bitte geben Sie ein gültiges Datum ein"};Object.assign(this.validators,validators)}setupRealTimeValidation(){this.form.querySelectorAll("[data-validate]").forEach(field=>{const validateFn=this.debounce(()=>this.validateField(field),300);field.addEventListener("blur",()=>this.validateField(field)),field.addEventListener("input",validateFn)})}validateField(field){const rules=JSON.parse(field.dataset.validate||"{}"),errors=[];for(const[rule,params]of Object.entries(rules)){const validator=this.validators[rule];if(validator){const error=validator(field.value,params);error&&errors.push(error)}}return this.displayFieldError(field,errors[0]),!errors.length}displayFieldError(field,error){let errorElement=this.cache.elements.get(`${field.id}_error`);errorElement||(errorElement=field.parentElement.querySelector(".error.message"),errorElement&&this.cache.elements.set(`${field.id}_error`,errorElement)),errorElement&&(error?(errorElement.textContent=error,errorElement.style.display="block",field.parentElement.classList.add("error")):(errorElement.style.display="none",field.parentElement.classList.remove("error")))}setupEventHandlers(){this.form.addEventListener("submit",e=>this.handleSubmit(e)),this.form.addEventListener("reset",()=>this.handleReset()),document.querySelectorAll(`[form="${this.config.id}"]`).forEach(element=>{element.addEventListener("click",e=>{element.type&&"submit"===element.type&&this.handleSubmit(e)})})}handleSubmit(e){if(e.preventDefault(),!this.validateForm())return!1;const formData=this.getFormData();return this.config.beforeSubmit&&this.config.beforeSubmit(formData),this.config.ajax?this.submitAjax(formData):this.form.submit(),!0}validateForm(){let isValid=!0;return this.form.querySelectorAll("[data-validate]").forEach(field=>{this.validateField(field)||(isValid=!1)}),isValid||this.showValidationSummary(),isValid}showValidationSummary(){if(this.config.showSummary){const summary=document.createElement("div");summary.className="ui error message",summary.innerHTML='<div class="header">Bitte korrigieren Sie die folgenden Fehler:</div>',this.form.prepend(summary),setTimeout(()=>summary.remove(),5e3)}}getFormData(){const formData=new FormData(this.form),data={};return formData.forEach((value,key)=>{key.includes("[]")?(key=key.replace("[]",""),data[key]||(data[key]=[]),data[key].push(value)):data[key]=value}),data}submitAjax(data){const btn=this.form.querySelector('[type="submit"]');btn&&(btn.disabled=!0,btn.classList.add("loading")),fetch(this.config.ajaxUrl||this.form.action,{method:this.config.method||"POST",headers:{"Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"},body:JSON.stringify(data)}).then(response=>{if(!response.ok)throw new Error(`HTTP error! status: ${response.status}`);return response.json()}).then(result=>{this.handleAjaxResponse(result)}).catch(error=>{this.handleAjaxError(error)}).finally(()=>{btn&&(btn.disabled=!1,btn.classList.remove("loading"))})}handleAjaxResponse(response){response.success?(this.config.onSuccess&&this.config.onSuccess(response),this.showMessage("success",response.message||"Erfolgreich gespeichert!"),response.redirect&&(window.location.href=response.redirect),response.reset&&this.form.reset()):(this.config.onError&&this.config.onError(response),this.showMessage("error",response.message||"Ein Fehler ist aufgetreten"),response.errors&&this.displayErrors(response.errors))}handleAjaxError(error){console.error("AJAX Error:",error),this.showMessage("error","Verbindungsfehler. Bitte versuchen Sie es später erneut.")}showMessage(type,message){const msgElement=document.createElement("div");msgElement.className=`ui ${type} message`,msgElement.textContent=message,this.form.prepend(msgElement),setTimeout(()=>msgElement.remove(),5e3)}setupConditionalLogic(){this.config.conditionals&&this.config.conditionals.forEach(rule=>{const trigger=this.form.querySelector(`[name="${rule.field}"]`);trigger&&trigger.addEventListener("change",()=>{const target=this.form.querySelector(rule.target),show=this.evaluateCondition(trigger.value,rule.condition,rule.value);target&&(target.style.display=show?"":"none")})})}evaluateCondition(fieldValue,condition,targetValue){switch(condition){case"equals":return fieldValue===targetValue;case"not_equals":return fieldValue!==targetValue;case"greater":return parseFloat(fieldValue)>parseFloat(targetValue);case"less":return parseFloat(fieldValue)<parseFloat(targetValue);case"contains":return fieldValue.includes(targetValue);case"empty":return!fieldValue;case"not_empty":return!!fieldValue;default:return!0}}setupDynamicFields(){this.form.querySelectorAll("[data-dynamic]").forEach(container=>{const config=JSON.parse(container.dataset.dynamic),addBtn=container.querySelector(".add-field");addBtn&&addBtn.addEventListener("click",()=>this.addDynamicField(container,config)),container.querySelectorAll(".remove-field").forEach(btn=>{btn.addEventListener("click",e=>this.removeDynamicField(e.target))})})}addDynamicField(container,config){const template=container.querySelector(".field-template");if(template){const newField=template.cloneNode(!0),index=container.querySelectorAll(".dynamic-field").length;newField.classList.remove("field-template"),newField.classList.add("dynamic-field"),newField.innerHTML=newField.innerHTML.replace(/\{index\}/g,index),container.insertBefore(newField,template),this.setupFieldHandlers(newField)}}removeDynamicField(button){const field=button.closest(".dynamic-field");field&&field.remove()}setupAjax(){this.config.ajax&&(this.config.ajaxUrl||(this.config.ajaxUrl=this.form.action),this.config.method||(this.config.method=this.form.method||"POST"))}handleReset(){this.errors={},this.form.querySelectorAll(".error.message").forEach(error=>{error.style.display="none"}),this.form.querySelectorAll(".error").forEach(field=>{field.classList.remove("error")})}initializePlugins(){this.initDatePickers(),this.initColorPickers(),this.initFileUploads(),this.initRichTextEditors()}initDatePickers(){this.form.querySelectorAll('input[type="date"]').forEach(input=>{input.addEventListener("focus",()=>{input.showPicker&&input.showPicker()})})}initColorPickers(){this.form.querySelectorAll('input[type="color"]').forEach(input=>{const preview=document.createElement("span");preview.style.cssText="display:inline-block;width:30px;height:30px;border:1px solid #ddd;margin-left:10px;vertical-align:middle;",preview.style.backgroundColor=input.value,input.parentNode.insertBefore(preview,input.nextSibling),input.addEventListener("input",()=>{preview.style.backgroundColor=input.value})})}initFileUploads(){this.form.querySelectorAll('input[type="file"]').forEach(input=>{input.addEventListener("change",e=>{const files=Array.from(e.target.files),preview=input.parentElement.querySelector(".file-preview");preview&&(preview.innerHTML=files.map(f=>`<div class="ui label">${f.name} (${this.formatFileSize(f.size)})</div>`).join(""))})})}formatFileSize(bytes){return bytes<1024?bytes+" B":bytes<1048576?(bytes/1024).toFixed(1)+" KB":(bytes/1048576).toFixed(1)+" MB"}initRichTextEditors(){this.form.querySelectorAll(".rich-text-editor").forEach(editor=>{editor.contentEditable=!0,editor.addEventListener("input",()=>{const input=editor.dataset.input,hiddenInput=this.form.querySelector(`[name="${input}"]`);hiddenInput&&(hiddenInput.value=editor.innerHTML)})})}setupFieldHandlers(container){container.querySelectorAll("[data-validate]").forEach(field=>{const validateFn=this.debounce(()=>this.validateField(field),300);field.addEventListener("blur",()=>this.validateField(field)),field.addEventListener("input",validateFn)})}debounce(func,wait){let timeout;return function(...args){clearTimeout(timeout),timeout=setTimeout(()=>func.apply(this,args),wait)}}throttle(func,limit){let inThrottle;return function(...args){inThrottle||(func.apply(this,args),inThrottle=!0,setTimeout(()=>inThrottle=!1,limit))}}destroy(){this.form.removeEventListener("submit",this.handleSubmit),this.form.removeEventListener("reset",this.handleReset),this.cache.clear(),this.debounceTimers.forEach(timer=>clearTimeout(timer)),this.debounceTimers.clear()}}window.EasyFormHandler=EasyFormHandler,document.addEventListener("DOMContentLoaded",()=>{window.EasyFormConfigs&&window.EasyFormConfigs.forEach(config=>{new EasyFormHandler(config)})})}();